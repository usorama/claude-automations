#!/usr/bin/env python3
"""
PR Creation Hook - Automatically creates PRs when todo list is complete or session ends
"""

import subprocess
import json
import os
import sys
from datetime import datetime
from pathlib import Path

def read_todo_state():
    """Read current todo state from Claude's tracking"""
    # This would integrate with Claude's todo tracking system
    # For now, we'll check if a todo file exists
    todo_file = Path.home() / '.claude' / 'current_todos.json'
    if todo_file.exists():
        with open(todo_file) as f:
            return json.load(f)
    return []

def get_current_branch():
    """Get the current git branch name"""
    try:
        result = subprocess.run(
            ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return None

def get_uncommitted_changes():
    """Check if there are uncommitted changes"""
    try:
        result = subprocess.run(
            ['git', 'status', '--porcelain'],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip() != ''
    except subprocess.CalledProcessError:
        return False

def generate_pr_title():
    """Generate PR title based on completed work"""
    todos = read_todo_state()
    if todos:
        # Use the first completed todo as basis for title
        completed = [t for t in todos if t.get('status') == 'completed']
        if completed:
            return f"feat: {completed[0].get('content', 'Complete implementation tasks')}"
    
    # Fallback title
    timestamp = datetime.now().strftime('%Y-%m-%d')
    return f"feat: Implementation updates - {timestamp}"

def generate_pr_body():
    """Generate PR body with completed tasks and context"""
    todos = read_todo_state()
    
    body = "## Summary\n\n"
    body += "This PR implements the following tasks:\n\n"
    
    if todos:
        completed = [t for t in todos if t.get('status') == 'completed']
        in_progress = [t for t in todos if t.get('status') == 'in_progress']
        pending = [t for t in todos if t.get('status') == 'pending']
        
        if completed:
            body += "### ✅ Completed\n"
            for todo in completed:
                body += f"- {todo.get('content', 'Task')}\n"
            body += "\n"
        
        if in_progress:
            body += "### 🔄 In Progress\n"
            for todo in in_progress:
                body += f"- {todo.get('content', 'Task')}\n"
            body += "\n"
        
        if pending:
            body += "### 📋 Remaining\n"
            for todo in pending:
                body += f"- {todo.get('content', 'Task')}\n"
            body += "\n"
    
    body += "## Test Plan\n\n"
    body += "- [ ] Code passes linting and type checks\n"
    body += "- [ ] All tests pass\n"
    body += "- [ ] No silent failures detected\n"
    body += "- [ ] Manifests generated successfully\n\n"
    
    body += "---\n"
    body += "🤖 *Auto-generated by Claude Code PR Creation Hook*"
    
    return body

def create_pr():
    """Create a pull request using GitHub CLI"""
    current_branch = get_current_branch()
    
    if not current_branch or current_branch == 'main':
        print("⚠️ Cannot create PR from main branch")
        return False
    
    # Check if gh CLI is available
    try:
        subprocess.run(['gh', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("⚠️ GitHub CLI (gh) not found. Please install: https://cli.github.com")
        return False
    
    # Create PR
    try:
        title = generate_pr_title()
        body = generate_pr_body()
        
        # Write body to temp file to handle multiline content
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(body)
            body_file = f.name
        
        result = subprocess.run([
            'gh', 'pr', 'create',
            '--title', title,
            '--body-file', body_file,
            '--label', 'auto-generated',
            '--label', 'claude-code'
        ], capture_output=True, text=True)
        
        # Clean up temp file
        os.unlink(body_file)
        
        if result.returncode == 0:
            print(f"✅ PR created: {result.stdout.strip()}")
            return True
        else:
            print(f"❌ Failed to create PR: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"❌ Error creating PR: {e}")
        return False

def auto_create_pr_on_feature_complete():
    """Main function to check and create PR when appropriate"""
    
    # Check if we're in a git repository
    if not os.path.exists('.git'):
        print("Not in a git repository")
        return
    
    # Check if all todos are complete
    todos = read_todo_state()
    if not todos:
        print("No todos found")
        return
    
    all_complete = all(t.get('status') == 'completed' for t in todos)
    
    if all_complete:
        print("✅ All todos complete! Creating PR...")
        
        # First, commit any uncommitted changes
        if get_uncommitted_changes():
            print("📝 Committing uncommitted changes...")
            subprocess.run([
                'git', 'add', '-A'
            ])
            subprocess.run([
                'git', 'commit', '-m', 
                'feat: Complete all todo tasks\n\n🤖 Auto-commit by PR creation hook'
            ])
        
        # Push branch to remote
        current_branch = get_current_branch()
        print(f"📤 Pushing branch {current_branch}...")
        subprocess.run(['git', 'push', '-u', 'origin', current_branch])
        
        # Create PR
        create_pr()
    else:
        incomplete = len([t for t in todos if t.get('status') != 'completed'])
        print(f"📋 {incomplete} todos still incomplete")

def main():
    """Entry point for the hook"""
    # This can be triggered by:
    # 1. Claude Code session ending
    # 2. Manual trigger
    # 3. Todo list completion event
    
    print("🔍 PR Creation Hook triggered...")
    
    # Check if this is a manual trigger or automatic
    if len(sys.argv) > 1 and sys.argv[1] == '--force':
        print("Force creating PR...")
        create_pr()
    else:
        auto_create_pr_on_feature_complete()

if __name__ == '__main__':
    main()